"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var TerminusBootstrapService_1;
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const terminus_constants_1 = require("./terminus.constants");
const core_1 = require("@nestjs/core");
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
const health_check_executor_service_1 = require("./health-check/health-check-executor.service");
const deprecate = require("deprecate");
exports.SIG_NOT_EXIST = 'SIG_NOT_EXIST';
/**
 * Bootstraps the third party Terminus library with the
 * configured Module options
 */
let TerminusBootstrapService = TerminusBootstrapService_1 = class TerminusBootstrapService {
    constructor(options, terminus, healthCheckExecutor, refHost, applicationConfig) {
        this.options = options;
        this.terminus = terminus;
        this.healthCheckExecutor = healthCheckExecutor;
        this.refHost = refHost;
        this.applicationConfig = applicationConfig;
        /**
         * The NestJS logger
         */
        this.logger = new common_1.Logger(TerminusBootstrapService_1.name, true);
        (options === null || options === void 0 ? void 0 : options.disableDeprecationWarnings) !== true &&
            deprecate('TerminusModule.forRoot and TerminusModule.forRootAsync', 'In order to migrate, checkout the Migration Guide on https://docs.nestjs.com/migration-guide#terminus');
    }
    /**
     * Logs an error message of terminus
     * @param message The log message
     * @param error The error which was thrown
     */
    logError(message, error) {
        if (error.causes) {
            const healthError = error;
            message = `${message} ${JSON.stringify(healthError.causes)}`;
        }
        this.logger.error(message, error.stack);
    }
    /**
     * Logs the health check registration to the logger
     * @param healthChecks The health check map to log
     */
    logHealthCheckRegister(healthChecks) {
        Object.keys(healthChecks).forEach((endpoint) => this.logger.log(`Mapped {${endpoint}, GET} healthcheck route`, 'TerminusExplorer'));
    }
    validateEndpointUrl(endpoint) {
        const prefix = this.applicationConfig.getGlobalPrefix();
        const shouldUseGlobalPrefix = prefix &&
            (endpoint.useGlobalPrefix
                ? endpoint.useGlobalPrefix
                : this.options.useGlobalPrefix &&
                    endpoint.useGlobalPrefix === undefined);
        let url = shared_utils_1.validatePath(endpoint.url);
        if (shouldUseGlobalPrefix) {
            url = shared_utils_1.validatePath(prefix) + url;
        }
        return url;
    }
    /**
     * Returns the health check map using the configured health
     * indicators
     */
    getHealthChecksMap() {
        return this.options.endpoints.reduce((healthChecks, endpoint) => {
            const url = this.validateEndpointUrl(endpoint);
            healthChecks[url] = () => __awaiter(this, void 0, void 0, function* () { return this.healthCheckExecutor.executeDeprecated(endpoint.healthIndicators); });
            return healthChecks;
        }, {});
    }
    /**
     * Bootstraps the third party terminus library with
     * the given module options
     */
    bootstrapTerminus() {
        const healthChecks = this.getHealthChecksMap();
        this.terminus(this.httpServer, {
            healthChecks,
            // Use the logger of the user
            // or by the default logger if is not defined
            logger: this.options.logger || this.logError.bind(this),
            // Without that terminus will use default SIGTERM signal and default handler which stops this.httpServer
            signal: exports.SIG_NOT_EXIST,
        });
        this.logHealthCheckRegister(healthChecks);
    }
    hasHttpServer() {
        return this.refHost && this.refHost.httpAdapter && this.refHost.httpAdapter;
    }
    /**
     * Gets called when the application gets bootstrapped.
     */
    onApplicationBootstrap() {
        // In case the application context has been bootstrapped with
        // NestFactory.createApplicationContext(), ignore bootstrapping
        // Terminus
        if (this.hasHttpServer()) {
            this.httpServer = this.refHost.httpAdapter.getHttpServer();
            this.bootstrapTerminus();
        }
    }
};
TerminusBootstrapService = TerminusBootstrapService_1 = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject(terminus_constants_1.TERMINUS_MODULE_OPTIONS)),
    __param(1, common_1.Inject(terminus_constants_1.TERMINUS_LIB)),
    __metadata("design:paramtypes", [Object, Object, health_check_executor_service_1.HealthCheckExecutor,
        core_1.HttpAdapterHost,
        core_1.ApplicationConfig])
], TerminusBootstrapService);
exports.TerminusBootstrapService = TerminusBootstrapService;
