"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var TerminusCoreModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const terminus_constants_1 = require("./terminus.constants");
const terminus_bootstrap_service_1 = require("./terminus-bootstrap.service");
const terminus_lib_provider_1 = require("./terminus-lib.provider");
const terminus_module_1 = require("./terminus.module");
const diskusage_lib_provider_1 = require("./health-indicator/disk/diskusage-lib.provider");
const health_indicators_provider_1 = require("./health-indicator/health-indicators.provider");
const health_check_executor_service_1 = require("./health-check/health-check-executor.service");
/**
 * The internal Terminus Module which handles the integration
 * with the third party Terminus library and Nest
 *
 * @internal
 */
let TerminusCoreModule = TerminusCoreModule_1 = class TerminusCoreModule {
    /**
     * Bootstraps the internal Terminus Module with the given options
     * synchronously and sets the correct providers
     * @param options The options to bootstrap the module synchronously
     */
    static forRoot(options) {
        const terminusModuleOptions = {
            provide: terminus_constants_1.TERMINUS_MODULE_OPTIONS,
            useValue: options,
        };
        return {
            module: TerminusCoreModule_1,
            imports: [common_1.HttpModule],
            providers: [
                terminusModuleOptions,
                terminus_lib_provider_1.TerminusLibProvider,
                terminus_bootstrap_service_1.TerminusBootstrapService,
                diskusage_lib_provider_1.DiskusageLibProvider,
                ...health_indicators_provider_1.HEALTH_INDICATORS,
            ],
            exports: [...health_indicators_provider_1.HEALTH_INDICATORS],
        };
    }
    /**
     * Bootstraps the internal Terminus Module with the given
     * options asynchronously and sets the correct providers
     * @param options The options to bootstrap the module
     */
    static forRootAsync(options) {
        const asyncProviders = this.createAsyncProviders(options);
        return {
            module: terminus_module_1.TerminusModule,
            imports: [...(options.imports || []), common_1.HttpModule],
            providers: [
                ...asyncProviders,
                terminus_bootstrap_service_1.TerminusBootstrapService,
                health_check_executor_service_1.HealthCheckExecutor,
                terminus_lib_provider_1.TerminusLibProvider,
                diskusage_lib_provider_1.DiskusageLibProvider,
                ...health_indicators_provider_1.HEALTH_INDICATORS,
            ],
            exports: [...health_indicators_provider_1.HEALTH_INDICATORS],
        };
    }
    /**
     * Returns the asynchrnous providers depending on the given module
     * options
     * @param options Options for the asynchrnous terminus module
     */
    static createAsyncProviders(options) {
        if (options.useFactory || options.useExisting) {
            return [this.createAsyncOptionsProvider(options)];
        }
        const useClass = options.useClass;
        return [
            this.createAsyncOptionsProvider(options),
            {
                provide: useClass,
                useClass,
                inject: [...(options.inject || [])],
            },
        ];
    }
    /**
     * Returns the asynchrnous Terminus options providers depending on the
     * given module options
     * @param options Options for the asynchrnous terminus module
     */
    static createAsyncOptionsProvider(options) {
        if (options.useFactory) {
            return {
                provide: terminus_constants_1.TERMINUS_MODULE_OPTIONS,
                useFactory: options.useFactory,
                inject: options.inject || [],
            };
        }
        if (options.useClass || options.useExisting) {
            // Bug with TypeScript 3.5.2: https://github.com/microsoft/TypeScript/issues/31937
            const inject = [
                (options.useClass || options.useExisting),
            ];
            return {
                provide: terminus_constants_1.TERMINUS_MODULE_OPTIONS,
                useFactory: (optionsFactory) => __awaiter(this, void 0, void 0, function* () { return yield optionsFactory.createTerminusOptions(); }),
                inject,
            };
        }
        throw new Error();
    }
};
TerminusCoreModule = TerminusCoreModule_1 = __decorate([
    common_1.Global(),
    common_1.Module({})
], TerminusCoreModule);
exports.TerminusCoreModule = TerminusCoreModule;
