"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const __1 = require("../");
const health_check_error_1 = require("../../health-check/health-check.error");
/**
 * The DNSHealthIndicator contains health indicators
 * which are used for health checks related to HTTP requests
 * and DNS
 *
 * @publicApi
 * @module TerminusModule
 */
let DNSHealthIndicator = class DNSHealthIndicator extends __1.HealthIndicator {
    /**
     * Initializes the health indicator
     * @param httpService The HttpService provided by Nest
     */
    constructor(httpService) {
        super();
        this.httpService = httpService;
    }
    /**
     * Executes a request with the given parameters
     * @param url The url of the health check
     * @param options The optional axios options of the request
     */
    pingDNS(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.httpService.request(Object.assign({ url }, options)).toPromise();
        });
    }
    /**
     * Prepares and throw a HealthCheckError
     * @param key The key which will be used for the result object
     * @param error The thrown error
     *
     * @throws {HealthCheckError}
     */
    generateHttpError(key, error) {
        // TODO: Check for `error.isAxiosError`
        // Upgrade axios for that as soon ^0.19.0 is released
        if (error) {
            const response = {
                message: error.message,
            };
            if (error.response) {
                response.statusCode = error.response.status;
                response.statusText = error.response.statusText;
            }
            throw new health_check_error_1.HealthCheckError(error.message, this.getStatus(key, false, response));
        }
    }
    /**
     * Checks if the given url respons in the given timeout
     * and returns a result object corresponding to the result
     * @param key The key which will be used for the result object
     * @param url The url which should be request
     * @param options Optional axios options
     *
     * @throws {HealthCheckError} In case the health indicator failed
     *
     * @example
     * dnsHealthIndicator.pingCheck('google', 'https://google.com', { timeout: 800 })
     */
    pingCheck(key, url, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let isHealthy = false;
            try {
                yield this.pingDNS(url, options);
                isHealthy = true;
            }
            catch (err) {
                this.generateHttpError(key, err);
            }
            return this.getStatus(key, isHealthy);
        });
    }
};
DNSHealthIndicator = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [common_1.HttpService])
], DNSHealthIndicator);
exports.DNSHealthIndicator = DNSHealthIndicator;
