import { OnApplicationBootstrap } from '@nestjs/common';
import { HttpAdapterHost, ApplicationConfig } from '@nestjs/core';
import { HealthCheckExecutor } from './health-check/health-check-executor.service';
import { TerminusModuleOptions } from './terminus-module-options.interface';
export declare const SIG_NOT_EXIST = "SIG_NOT_EXIST";
/**
 * Bootstraps the third party Terminus library with the
 * configured Module options
 */
export declare class TerminusBootstrapService implements OnApplicationBootstrap {
    private readonly options;
    private readonly terminus;
    private readonly healthCheckExecutor;
    private readonly refHost;
    private readonly applicationConfig;
    /**
     * The http server of NestJS
     */
    private httpServer;
    /**
     * The NestJS logger
     */
    private readonly logger;
    constructor(options: TerminusModuleOptions, terminus: any, healthCheckExecutor: HealthCheckExecutor, refHost: HttpAdapterHost<any>, applicationConfig: ApplicationConfig);
    /**
     * Logs an error message of terminus
     * @param message The log message
     * @param error The error which was thrown
     */
    private logError;
    /**
     * Logs the health check registration to the logger
     * @param healthChecks The health check map to log
     */
    private logHealthCheckRegister;
    private validateEndpointUrl;
    /**
     * Returns the health check map using the configured health
     * indicators
     */
    getHealthChecksMap(): any;
    /**
     * Bootstraps the third party terminus library with
     * the given module options
     */
    private bootstrapTerminus;
    private hasHttpServer;
    /**
     * Gets called when the application gets bootstrapped.
     */
    onApplicationBootstrap(): void;
}
