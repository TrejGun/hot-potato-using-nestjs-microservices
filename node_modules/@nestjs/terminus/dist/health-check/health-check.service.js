"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var HealthCheckService_1;
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const health_check_executor_service_1 = require("./health-check-executor.service");
/**
 * Handles Health Checks which can be used in
 * Controllers.
 */
let HealthCheckService = HealthCheckService_1 = class HealthCheckService {
    constructor(healthCheckExecutor) {
        this.healthCheckExecutor = healthCheckExecutor;
        this.logger = new common_1.Logger(HealthCheckService_1.name, true);
    }
    /**
     * Logs an error message of terminus
     * @param message The log message
     * @param error The error which was thrown
     */
    logError(message, causes) {
        message = `${message} ${JSON.stringify(causes)}`;
        this.logger.error(message);
    }
    /**
     * Checks the given health indicators
     *
     * ```typescript
     *
     * healthCheckService.check([
     *   () => this.dns.pingCheck('google', 'https://google.com'),
     * ]);
     *
     *
     * ```
     * @param healthIndicators The health indicators which should be checked
     */
    check(healthIndicators) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.healthCheckExecutor.execute(healthIndicators);
            if (result.status === 'ok') {
                return result;
            }
            this.logError('Health Check has failed!', result.error);
            throw new common_1.ServiceUnavailableException(result);
        });
    }
};
HealthCheckService = HealthCheckService_1 = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [health_check_executor_service_1.HealthCheckExecutor])
], HealthCheckService);
exports.HealthCheckService = HealthCheckService;
